version: "3.9"

x-hc: &hc
  interval: 10s
  timeout: 5s
  retries: 30
  start_period: 20s

services:

  yts-proxy:
    image: ${IMAGE_TRAEFIK}
    container_name: yts-proxy
    command:
      - "--api.dashboard=${TRAEFIK_DASHBOARD}"
      - "--api.insecure=${TRAEFIK_DASHBOARD}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic/traefik-dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--ping=${TRAEFIK_ENABLE_PING}"
      - "--entrypoints.metrics.address=:${TRAEFIK_METRICS_PORT}"
      - "--accesslog=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"

    ports:
      - "80:80"
      - "${TLS_PORT}:443"
      - "127.0.0.1:${TRAEFIK_DASHBOARD_PORT}:8080"
      - "127.0.0.1:${TRAEFIK_METRICS_PORT}:${TRAEFIK_METRICS_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./services/yts-proxy/dynamic:/etc/traefik/dynamic:ro
      - ./services/certs:/etc/traefik/certs:ro
      - ./services/certs/server.crt:/certs/server.crt:ro
      - ./services/certs/server.key:/certs/server.key:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.default-secure.tls=true"
      - "traefik.http.routers.default-secure.entrypoints=websecure"
      - "traefik.http.routers.default-secure.rule=HostRegexp(`{any:.*}`)"
      - "traefik.tls.certificates[0].certFile=/certs/server.crt"
      - "traefik.tls.certificates[0].keyFile=/certs/server.key"
    restart: unless-stopped
    networks:
      - yts-core

  yts-pg:
    image: ${IMAGE_POSTGRES}
    environment:
      POSTGRES_PASSWORD: ${PG_SUPER_PASSWORD}
      POSTGRES_USER: ${PG_SUPER_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
      PG_DB_KEYCLOAK: ${PG_DB_KEYCLOAK}
      PG_USER_KEYCLOAK: ${PG_USER_KEYCLOAK}
      PG_PWD_KEYCLOAK: ${PG_PWD_KEYCLOAK}
      PG_DB_AIRBYTE: ${PG_DB_AIRBYTE}
      PG_USER_AIRBYTE: ${PG_USER_AIRBYTE}
      PG_PWD_AIRBYTE: ${PG_PWD_AIRBYTE}
      PG_DB_OM: ${PG_DB_OM}
      PG_USER_OM: ${PG_USER_OM}
      PG_PWD_OM: ${PG_PWD_OM}
      PG_DB_TEMPORAL: ${PG_DB_TEMPORAL}
      PG_USER_TEMPORAL: ${PG_USER_TEMPORAL}
      PG_PWD_TEMPORAL: ${PG_PWD_TEMPORAL}
    volumes:
      - ./services/yts-pg/data:/var/lib/postgresql/data
      - ./services/yts-pg/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL","/docker-entrypoint-initdb.d/99-ensure-users-runtime.sh"]
      <<: *hc
    restart: unless-stopped
    ports:
      - 5432:5432
    networks:
      - yts-core


  yts-keycloak:
    image: ${IMAGE_KEYCLOAK}
    container_name: yts-keycloak
    command:
      - start
      - --hostname=${HOST_SSO}
      - --proxy-headers=xforwarded
      - --http-enabled=${KC_HTTP_ENABLED}
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PWD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_KEYCLOAK}
      KC_DB_USERNAME: ${PG_USER_KEYCLOAK}
      KC_DB_PASSWORD: ${PG_PWD_KEYCLOAK}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT}
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED}
      KC_FEATURES: scripts
    depends_on:
      yts-pg:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kc-redirect.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc-redirect.entrypoints=web"
      - "traefik.http.routers.kc-redirect.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.kc.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc.entrypoints=websecure"
      - "traefik.http.routers.kc.tls=true"
      - "traefik.http.routers.kc.service=kc"
      #- "traefik.http.routers.kc.tls.domains[0].main=${HOST_SSO}"
      - "traefik.http.services.kc.loadbalancer.server.port=8080"
      - "traefik.http.services.kc.loadbalancer.passhostheader=true"
      #- optional config for Keycloak behind proxy with path
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Host=${HOST_SSO}"
      - "traefik.http.routers.kc.middlewares=kc-headers"
    restart: unless-stopped
    networks:
      - yts-core

  yts-minio:
    image: ${IMAGE_MINIO}
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION_NAME: ${S3_REGION}
      MINIO_SERVER_URL: https://${HOST_MINIO}
    volumes:
      - ./services/yts-minio/data:/data
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9000/minio/health/live"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-minio-console.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/`)"
      - "traefik.http.routers.yts-minio-console.entrypoints=websecure"
      - "traefik.http.routers.yts-minio-console.tls=true"
      - "traefik.http.routers.yts-minio-console.service=yts-minio-console"
      - "traefik.http.services.yts-minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.yts-minio-api.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/s3`)"
      - "traefik.http.routers.yts-minio-api.entrypoints=websecure"
      - "traefik.http.routers.yts-minio-api.tls=true"
      - "traefik.http.routers.yts-minio-api.service=yts-minio-api"
      - "traefik.http.services.yts-minio-api.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.yts-strip-s3.stripprefixregex.regex=/s3"
      - "traefik.http.routers.yts-minio-api.middlewares=yts-strip-s3@docker"
    restart: unless-stopped
    networks:
      - yts-core

  yts-minio-init:
    image: ${IMAGE_MINIO_MC}
    depends_on:
      yts-minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET}
    entrypoint: ["/bin/sh","-c","/init.sh"]
    volumes:
      - ./services/yts-minio-init/init/init.sh:/init.sh:ro
    restart: "no"
    networks:
      - yts-core

  yts-nessie:
    image: ${IMAGE_NESSIE}
    container_name: yts-nessie
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://127.0.0.1:19120/api/v1/config >/dev/null || wget -qO- http://127.0.0.1:19120/api/v1/config >/dev/null"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=yts-core"
      - "traefik.http.routers.yts-nessie.rule=Host(`${HOST_NESSIE}`)"
      - "traefik.http.routers.yts-nessie.entrypoints=websecure"
      - "traefik.http.routers.yts-nessie.tls=true"
      - "traefik.http.services.yts-nessie.loadbalancer.server.port=19120"
    restart: unless-stopped
    networks:
      - yts-core

  yts-trino:
    image: ${IMAGE_TRINO}
    depends_on:
      yts-nessie:
        condition: service_started
      yts-minio:
        condition: service_started
    volumes:
      - ./services/yts-trino/init/catalog:/etc/trino/catalog
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:8080/v1/info"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-trino.rule=Host(`${HOST_TRINO}`)"
      - "traefik.http.routers.yts-trino.entrypoints=websecure"
      - "traefik.http.routers.yts-trino.tls=true"
      - "traefik.http.services.yts-trino.loadbalancer.server.port=8080"
    restart: unless-stopped
    networks:
      - yts-core

  yts-airbyte-server:
    image: ${IMAGE_AIRBYTE_SERVER}
    environment:
      AIRBYTE_ROLE: server
      DATABASE_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_AIRBYTE}?sslmode=disable
      DATABASE_USER: ${PG_USER_AIRBYTE}
      DATABASE_PASSWORD: ${PG_PWD_AIRBYTE}
      TEMPORAL_HOST: yts-airbyte-temporal:7233
      INTERNAL_API_HOST: http://yts-airbyte-server:8001/
      WORKLOAD_API_HOST: http://yts-airbyte-server:8001/
      WEBAPP_URL: https://${HOST_AIRBYTE}
      WORKSPACE_ROOT: /data/airbyte/workspace
      AIRBYTE_CLOUD_STORAGE_TYPE: S3
      AIRBYTE_CLOUD_STORAGE_BUCKET_LOG: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_STATE: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_WORKLOAD_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_ACTIVITY_PAYLOAD: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_AUDIT_LOGGING: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_PROFILER_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      AIRBYTE_CLOUD_STORAGE_S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AIRBYTE_CLOUD_STORAGE_S3_REGION: ${S3_REGION}
      AIRBYTE_CLOUD_STORAGE_S3_ENDPOINT: http://yts-minio:9000
      AIRBYTE_CLOUD_STORAGE_S3_PATH_STYLE_ACCESS: "true"
      AIRBYTE_SECRET_PERSISTENCE: database
    volumes:
      - ./services/yts-airbyte-server/data/workspace:/data/airbyte/workspace
    depends_on:
      yts-pg:
        condition: service_healthy
      yts-airbyte-temporal:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-airbyte-ui.rule=Host(`${HOST_AIRBYTE}`)"
      - "traefik.http.routers.yts-airbyte-ui.entrypoints=websecure"
      - "traefik.http.routers.yts-airbyte-ui.tls=true"
      - "traefik.http.services.yts-airbyte-ui.loadbalancer.server.port=8001"
      - "traefik.http.routers.yts-airbyte-api.rule=Host(`${HOST_AIRBYTE}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.yts-airbyte-api.entrypoints=websecure"
      - "traefik.http.routers.yts-airbyte-api.tls=true"
      - "traefik.http.services.yts-airbyte-api.loadbalancer.server.port=8001"
    restart: unless-stopped
    networks:
      - yts-core

  yts-airbyte-worker:
    image: ${IMAGE_AIRBYTE_WORKER}
    environment:
      AIRBYTE_ROLE: worker
      DATABASE_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_AIRBYTE}?sslmode=disable
      DATABASE_USER: ${PG_USER_AIRBYTE}
      DATABASE_PASSWORD: ${PG_PWD_AIRBYTE}
      TEMPORAL_HOST: yts-airbyte-temporal:7233
      INTERNAL_API_HOST: http://yts-airbyte-server:8001/
      WORKLOAD_API_HOST: http://yts-airbyte-server:8001/
      WORKSPACE_ROOT: /data/airbyte/workspace
      AIRBYTE_CLOUD_STORAGE_TYPE: S3
      AIRBYTE_CLOUD_STORAGE_BUCKET_LOG: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_STATE: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_WORKLOAD_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_ACTIVITY_PAYLOAD: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_AUDIT_LOGGING: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_PROFILER_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      AIRBYTE_CLOUD_STORAGE_S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AIRBYTE_CLOUD_STORAGE_S3_REGION: ${S3_REGION}
      AIRBYTE_CLOUD_STORAGE_S3_ENDPOINT: http://yts-minio:9000
      AIRBYTE_CLOUD_STORAGE_S3_PATH_STYLE_ACCESS: "true"
      AIRBYTE_SECRET_PERSISTENCE: database
    volumes:
      - ./services/yts-airbyte-server/data/workspace:/data/airbyte/workspace
    depends_on:
      yts-airbyte-server:
        condition: service_started
      yts-pg:
        condition: service_healthy
      yts-airbyte-temporal:
        condition: service_started
    restart: unless-stopped
    networks:
      - yts-core

  yts-airbyte-temporal:
    image: ${IMAGE_TEMPORAL}
    environment:
      DB: postgres12_pgx
      DB_PORT: ${PG_PORT}
      DBNAME: ${PG_DB_TEMPORAL}
      VISIBILITY_DBNAME: ${PG_DB_TEMPORAL_VISIBILITY}
      SKIP_DB_CREATE: "true"
      POSTGRES_USER: ${PG_USER_TEMPORAL}
      POSTGRES_PWD: ${PG_PWD_TEMPORAL}
      POSTGRES_SEEDS: ${PG_HOST}
      POSTGRES_PORT: ${PG_PORT}
      POSTGRES_DB: ${PG_DB_TEMPORAL}
    depends_on:
      yts-pg:
        condition: service_healthy
    healthcheck:
      test: ["CMD","tctl","--address","localhost:7233","namespace","list"]
      <<: *hc
    restart: unless-stopped
    networks:
      - yts-core

  yts-om-es:
    image: ${IMAGE_ELASTICSEARCH}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED}
      - xpack.security.http.ssl.enabled=${ELASTICSEARCH_HTTP_SSL_ENABLED}
      - xpack.security.http.ssl.key=${ELASTICSEARCH_HTTP_SSL_KEY}
      - xpack.security.http.ssl.certificate=${ELASTICSEARCH_HTTP_SSL_CERT}
      - xpack.security.http.ssl.certificate_authorities=${ELASTICSEARCH_HTTP_SSL_CA}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_USERNAME=${ELASTICSEARCH_USERNAME}
    volumes:
      - ./services/yts-om-es/data:/usr/share/elasticsearch/data
      - ./services/yts-om-es/data/certs:/usr/share/elasticsearch/config/certs:ro
    healthcheck:
      test:
        - CMD-SHELL
        - >-
          URL="$${ELASTICSEARCH_SCHEME}://localhost:9200/_cluster/health";
          set -- curl -fsS;
          if [ "$${ELASTICSEARCH_SECURITY_ENABLED}" = "true" ]; then
            set -- "$@" -u "$${ELASTICSEARCH_USERNAME}:$${ELASTIC_PASSWORD}"
          fi;
          if [ "$${ELASTICSEARCH_HTTP_SSL_ENABLED}" = "true" ]; then
            set -- "$@" --cacert "$${ELASTICSEARCH_HTTP_SSL_CA}"
          fi;
          set -- "$@" "$${URL}";
          "$@" | grep -Eq '"status":"(yellow|green)"'
      <<: *hc
    restart: unless-stopped
    networks:
      - yts-core

  yts-openmetadata-server:
    image: ${IMAGE_OPENMETADATA}
    depends_on:
      yts-pg:
        condition: service_healthy
      yts-om-es:
        condition: service_healthy
    environment:
      OPENMETADATA_CLUSTER_NAME: docker
      OPENMETADATA_DATABASE_DRIVER: "postgres"
      OPENMETADATA_DATABASE_HOST: ${PG_HOST}
      OPENMETADATA_DATABASE_PORT: ${PG_PORT}
      OPENMETADATA_DATABASE_USER: ${PG_USER_OM}
      OPENMETADATA_DATABASE_PASSWORD: ${PG_PWD_OM}
      OPENMETADATA_DATABASE_DB: ${PG_DB_OM}
      AUTHENTICATION_PROVIDER: basic
      ELASTICSEARCH_HOST: yts-om-es
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_SCHEME: ${ELASTICSEARCH_SCHEME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_USER: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_VERIFY_CERTIFICATE: ${ELASTICSEARCH_VERIFY_CERTIFICATE}
      ELASTICSEARCH_SSL_CERT: ${OPENMETADATA_ELASTICSEARCH_CA}
    volumes:
      - ./services/yts-om-es/data/certs:/opt/openmetadata/certs:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-om.rule=Host(`${HOST_META}`)"
      - "traefik.http.routers.yts-om.entrypoints=websecure"
      - "traefik.http.routers.yts-om.tls=true"
      - "traefik.http.services.yts-om.loadbalancer.server.port=8585"
    restart: unless-stopped
    networks:
      - yts-core

  # yts-llm:
  #   image: ${IMAGE_OLLAMA}
  #   environment:
  #     OLLAMA_NUM_PARALLEL: ${OLLAMA_NUM_PARALLEL}
  #     OLLAMA_KEEP_ALIVE: ${OLLAMA_KEEP_ALIVE}
  #   volumes:
  #     - ./services/yts-llm/data:/root/.ollama:rw
  #   entrypoint: ["/bin/sh","-c"]
  #   command: >
  #     "ollama serve & 
  #      sleep 3 && 
  #      ollama pull ${OLLAMA_MODEL} || true && 
  #      tail -f /dev/null"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.yts-llm.rule=Host(`${HOST_AI}`)"
  #     - "traefik.http.routers.yts-llm.entrypoints=websecure"
  #     - "traefik.http.routers.yts-llm.tls=true"
  #     - "traefik.http.services.yts-llm.loadbalancer.server.port=11434"
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-ai-gateway:
  #   image: yts-ai-gateway:latest
  #   environment:
  #     LLM_BASE_URL: http://yts-llm:11434
  #     READONLY_MODE: "true"
  #     DEFAULT_QUERY_LIMIT: "1000"
  #     OIDC_ISSUER: https://${HOST_SSO}
  #   depends_on:
  #     yts-llm:
  #       condition: service_started
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.yts-aigw.rule=Host(`${HOST_ASSIST}`)"
  #     - "traefik.http.routers.yts-aigw.entrypoints=websecure"
  #     - "traefik.http.routers.yts-aigw.tls=true"
  #     - "traefik.http.services.yts-aigw.loadbalancer.server.port=7080"
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  yts-dtadminui:
    image: node:20-alpine
    container_name: yts-dtadminui
    working_dir: /app
    environment:
      # 你的前端需要的公开变量
      PUBLIC_BASE_URL: https://${HOST_PORTAL}
      # 热更新在挂载卷/WSL上更稳定
      CHOKIDAR_USEPOLLING: "1"
      WATCHPACK_POLLING: "true"
      BROWSER: "none"
    volumes:
      # 把源码目录换成你的实际路径
      #- ./services/dtadmin-ui:/app
      - /opt/prod/trendsense/source/dtadmin-ui:/app
    command: >
      sh -lc "
        corepack enable || true;
        if [ -f pnpm-lock.yaml ]; then corepack prepare pnpm@latest --activate; pnpm i;
          pnpm dev --host 0.0.0.0 --port 3001;
        elif [ -f yarn.lock ]; then yarn install --frozen-lockfile;
          yarn dev --host 0.0.0.0 --port 3001;
        else npm ci || npm i;
          npm run dev -- --host 0.0.0.0 --port 3001;
        fi"
    labels:
      - traefik.enable=true
      - traefik.http.routers.yts-adminui.rule=Host(`${HOST_PORTAL}`)
      - traefik.http.routers.yts-adminui.entrypoints=websecure
      - traefik.http.routers.yts-adminui.tls=true
      - traefik.http.services.yts-adminui.loadbalancer.server.port=3001
      - traefik.http.services.yts-adminui.loadbalancer.passhostheader=false
    restart: unless-stopped
    networks:
      - yts-core

  yts-dtadmin:
    image: ghcr.io/graalvm/graalvm-community:21
    container_name: yts-dtadmin
    working_dir: /app
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: ${DTADMIN_API_PORT}
      # JHipster 常见端点
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,env,loggers,threaddump,configprops
      # 数据库（举例：指向你全局 PG）
      SPRING_DATASOURCE_URL: jdbc:postgresql://yts-pg:5432/${DTADMIN_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DTADMIN_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DTADMIN_DB_PASSWORD}
      # 允许被反代：如有需要可放宽 CORS
      # JHIPSTER_CORS_ALLOWED_ORIGINS: https://${HOST_PORTAL}

      # 添加 OAuth2 配置
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: https://${HOST_SSO}/realms/${KC_REALM}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID: ${OAUTH2_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_SCOPE: openid,profile,email
      
      # 跨域配置（如果需要）
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_REDIRECT_URI: https://${HOST_PORTAL}/login/oauth2/code/keycloak
      CORS_ALLOWED_ORIGINS: https://${HOST_PORTAL}
    volumes:
      - /opt/prod/trendsense/source/dtadmin:/app
      # Gradle/Maven 缓存（可选，加快编译）
      #- gradle-cache:/root/.gradle
      #- maven-cache:/root/.m2
      - /home/billy/.m2:/root/.m2
    command: >
      sh -lc "
        if [ -f gradlew ]; then chmod +x gradlew; ./gradlew -x test bootRun --args='--server.port=${DTADMIN_API_PORT}';
        elif [ -f mvnw ]; then chmod +x mvnw; ./mvnw -DskipTests spring-boot:run -Dspring-boot.run.jvmArguments='-Dserver.port=${DTADMIN_API_PORT}';
        else echo 'No Gradle/Maven wrapper found'; exit 1; fi"
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:${DTADMIN_API_PORT}/management/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    labels:
      - traefik.enable=true
      # 同域：Host(${HOST_PORTAL}) + /api 前缀
      - traefik.http.routers.yts-dtadmin-api.rule=Host(`${HOST_PORTAL}`) && PathPrefix(`/api`)
      - traefik.http.routers.yts-dtadmin-api.entrypoints=websecure
      - traefik.http.routers.yts-dtadmin-api.tls=true
      # /api 转发到后端根路径：去掉 /api 前缀
      - traefik.http.middlewares.yts-dtadmin-api-strip.stripprefixregex.regex=/api
      - traefik.http.routers.yts-dtadmin-api.middlewares=yts-dtadmin-api-strip@docker
      # 指定后端端口
      - traefik.http.services.yts-dtadmin-api.loadbalancer.server.port=${DTADMIN_API_PORT}
      # 如你之前的前端容器与 Traefik 不在同一网络，请显式指定：
      # - traefik.docker.network=yst-stack_yts-core
    restart: unless-stopped
    networks: [yts-core]

  # yts-dtadminui:
  #   image: yts-dtadminui:latest
  #   environment:
  #     PUBLIC_BASE_URL: https://${HOST_PORTAL}
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.yts-adminui.rule=Host(`${HOST_PORTAL}`)"
  #     - "traefik.http.routers.yts-adminui.entrypoints=websecure"
  #     - "traefik.http.routers.yts-adminui.tls=true"
  #     - "traefik.http.services.yts-adminui.loadbalancer.server.port=3001"
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-dtadmin:
  #   image: yts-dtadmin:latest
  #   environment:
  #     APP_EXTERNAL_URL: https://${HOST_ADMIN}
  #     OIDC_ISSUER: https://${HOST_SSO}
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.yts-admin.rule=Host(`${HOST_ADMIN}`)"
  #     - "traefik.http.routers.yts-admin.entrypoints=websecure"
  #     - "traefik.http.routers.yts-admin.tls=true"
  #     - "traefik.http.services.yts-admin.loadbalancer.server.port=8080"
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-loki:
  #   image: ${IMAGE_LOKI}
  #   profiles:
  #     - logging
  #   command: ["-config.file=/etc/loki/config.yml"]
  #   ports:
  #     - "127.0.0.1:3100:3100"
  #   volumes:
  #     - ./services/yts-loki/init/config.yml:/etc/loki/config.yml:ro
  #     - ./services/yts-loki/data:/loki
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-promtail:
  #   image: ${IMAGE_PROMTAIL}
  #   profiles:
  #     - logging
  #   command: ["--config.file=/etc/promtail/config.yml"]
  #   depends_on:
  #     yts-loki:
  #       condition: service_started
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./services/yts-promtail/init/config.yml:/etc/promtail/config.yml:ro
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-prometheus:
  #   image: ${IMAGE_PROMETHEUS}
  #   profiles:
  #     - monitoring
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #   volumes:
  #     - ./services/yts-prometheus/init/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - ./services/yts-prometheus/data:/prometheus
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-grafana:
  #   image: ${IMAGE_GRAFANA}
  #   profiles:
  #     - monitoring
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
  #   ports:
  #     - "127.0.0.1:3001:3000"
  #   volumes:
  #     - ./services/yts-grafana/data:/var/lib/grafana
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

  # yts-cadvisor:
  #   image: ${IMAGE_CADVISOR}
  #   profiles:
  #     - monitoring
  #   privileged: true
  #   command:
  #     - "--housekeeping_interval=10s"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   restart: unless-stopped
  #   networks:
  #     - yts-core

volumes:
  gradle-cache:

networks:
  yts-core:
    driver: bridge
