version: "3.9"

x-hc: &hc
  interval: 10s
  timeout: 5s
  retries: 30
  start_period: 20s

services:
  yts-proxy:
    image: ${IMAGE_TRAEFIK}
    command:
      - "--api.dashboard=${TRAEFIK_DASHBOARD}"
      - "--api.insecure=${TRAEFIK_DASHBOARD}"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.metrics.address=:${TRAEFIK_METRICS_PORT}"
      - "--providers.docker=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "${TLS_PORT}:443"
      - "127.0.0.1:${TRAEFIK_DASHBOARD_PORT}:8080"
      - "127.0.0.1:${TRAEFIK_METRICS_PORT}:${TRAEFIK_METRICS_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./services/yts-proxy/data/certs/server.crt:/certs/server.crt:ro
      - ./services/yts-proxy/data/certs/server.key:/certs/server.key:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.default-secure.tls=true"
      - "traefik.http.routers.default-secure.entrypoints=websecure"
      - "traefik.http.routers.default-secure.rule=HostRegexp(`{any:.*}`)"
      - "traefik.http.routers.default-secure.tls.certificates[0].certFile=/certs/server.crt"
      - "traefik.http.routers.default-secure.tls.certificates[0].keyFile=/certs/server.key"
    restart: unless-stopped
    networks:
      - yts-core

  yts-pg:
    image: ${IMAGE_POSTGRES}
    environment:
      POSTGRES_PASSWORD: ${PG_SUPER_PASSWORD}
      POSTGRES_USER: ${PG_SUPER_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
      PG_DB_KEYCLOAK: ${PG_DB_KEYCLOAK}
      PG_USER_KEYCLOAK: ${PG_USER_KEYCLOAK}
      PG_PWD_KEYCLOAK: ${PG_PWD_KEYCLOAK}
      PG_DB_AIRBYTE: ${PG_DB_AIRBYTE}
      PG_USER_AIRBYTE: ${PG_USER_AIRBYTE}
      PG_PWD_AIRBYTE: ${PG_PWD_AIRBYTE}
      PG_DB_OM: ${PG_DB_OM}
      PG_USER_OM: ${PG_USER_OM}
      PG_PWD_OM: ${PG_PWD_OM}
      PG_DB_TEMPORAL: ${PG_DB_TEMPORAL}
      PG_USER_TEMPORAL: ${PG_USER_TEMPORAL}
      PG_PWD_TEMPORAL: ${PG_PWD_TEMPORAL}
    volumes:
      - ./services/yts-pg/data:/var/lib/postgresql/data
      - ./services/yts-pg/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${PG_SUPER_USER} -d postgres"]
      <<: *hc
    restart: unless-stopped
    networks:
      - yts-core

  yts-keycloak:
    image: ${IMAGE_KEYCLOAK}
    command: ["start-dev", "--http-port=8080"]
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PWD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_KEYCLOAK}
      KC_DB_USERNAME: ${PG_USER_KEYCLOAK}
      KC_DB_PASSWORD: ${PG_PWD_KEYCLOAK}
      KC_PROXY: edge
      KC_HOSTNAME: https://${HOST_SSO}
    depends_on:
      yts-pg:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-kc.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.yts-kc.entrypoints=websecure"
      - "traefik.http.routers.yts-kc.tls=true"
      - "traefik.http.services.yts-kc.loadbalancer.server.port=8080"
    restart: unless-stopped
    networks:
      - yts-core

  yts-minio:
    image: ${IMAGE_MINIO}
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION_NAME: ${S3_REGION}
      MINIO_SERVER_URL: https://${HOST_MINIO}
    volumes:
      - ./services/yts-minio/data:/data
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9000/minio/health/live"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-minio-console.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/`)"
      - "traefik.http.routers.yts-minio-console.entrypoints=websecure"
      - "traefik.http.routers.yts-minio-console.tls=true"
      - "traefik.http.services.yts-minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.yts-minio-api.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/s3`)"
      - "traefik.http.routers.yts-minio-api.entrypoints=websecure"
      - "traefik.http.routers.yts-minio-api.tls=true"
      - "traefik.http.services.yts-minio-api.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.yts-strip-s3.stripprefixregex.regex=/s3"
      - "traefik.http.routers.yts-minio-api.middlewares=yts-strip-s3@docker"
    restart: unless-stopped
    networks:
      - yts-core

  yts-minio-init:
    image: ${IMAGE_MINIO_MC}
    depends_on:
      yts-minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET}
    entrypoint: ["/bin/sh","-c","/init.sh"]
    volumes:
      - ./services/yts-minio-init/init/init.sh:/init.sh:ro
    restart: "no"
    networks:
      - yts-core

  yts-metastore:
    image: ${IMAGE_HIVE}
    depends_on:
      yts-pg:
        condition: service_healthy
    environment:
      SERVICE_NAME: metastore
      HIVE_METASTORE_DB_TYPE: postgres
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_HMS}
      HIVE_METASTORE_USER: ${PG_USER_HMS}
      HIVE_METASTORE_PASSWORD: ${PG_PWD_HMS}
      HADOOP_CLIENT_OPTS: "-Xms256m -Xmx1024m"
    command: ["/opt/hive/bin/hive","--service","metastore","-p","9083"]
    healthcheck:
      test: ["CMD-SHELL","/opt/hive/bin/schematool -dbType postgres -info -userName ${PG_USER_HMS} -passWord ${PG_PWD_HMS} -url jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_HMS} >/dev/null 2>&1 || exit 1"]
      <<: *hc
    restart: unless-stopped
    networks:
      - yts-core

  yts-trino:
    image: ${IMAGE_TRINO}
    depends_on:
      yts-metastore:
        condition: service_started
      yts-minio:
        condition: service_started
    volumes:
      - ./services/yts-trino/init/catalog:/etc/trino/catalog
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:8080/v1/info"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-trino.rule=Host(`${HOST_TRINO}`)"
      - "traefik.http.routers.yts-trino.entrypoints=websecure"
      - "traefik.http.routers.yts-trino.tls=true"
      - "traefik.http.services.yts-trino.loadbalancer.server.port=8080"
    restart: unless-stopped
    networks:
      - yts-core

  yts-airbyte-server:
    image: ${IMAGE_AIRBYTE_SERVER}
    environment:
      AIRBYTE_ROLE: server
      DATABASE_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_AIRBYTE}?sslmode=disable
      DATABASE_USER: ${PG_USER_AIRBYTE}
      DATABASE_PASSWORD: ${PG_PWD_AIRBYTE}
      TEMPORAL_HOST: yts-airbyte-temporal:7233
      INTERNAL_API_HOST: http://yts-airbyte-server:8001/
      WORKLOAD_API_HOST: http://yts-airbyte-server:8001/
      WEBAPP_URL: https://${HOST_AIRBYTE}
      WORKSPACE_ROOT: /data/airbyte/workspace
      AIRBYTE_CLOUD_STORAGE_TYPE: S3
      AIRBYTE_CLOUD_STORAGE_BUCKET_LOG: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_STATE: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_WORKLOAD_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_ACTIVITY_PAYLOAD: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_AUDIT_LOGGING: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_PROFILER_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      AIRBYTE_CLOUD_STORAGE_S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AIRBYTE_CLOUD_STORAGE_S3_REGION: ${S3_REGION}
      AIRBYTE_CLOUD_STORAGE_S3_ENDPOINT: http://yts-minio:9000
      AIRBYTE_CLOUD_STORAGE_S3_PATH_STYLE_ACCESS: "true"
    volumes:
      - ./services/yts-airbyte-server/data/workspace:/data/airbyte/workspace
    depends_on:
      yts-pg:
        condition: service_healthy
      yts-airbyte-temporal:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-airbyte-ui.rule=Host(`${HOST_AIRBYTE}`)"
      - "traefik.http.routers.yts-airbyte-ui.entrypoints=websecure"
      - "traefik.http.routers.yts-airbyte-ui.tls=true"
      - "traefik.http.services.yts-airbyte-ui.loadbalancer.server.port=8001"
      - "traefik.http.routers.yts-airbyte-api.rule=Host(`${HOST_AIRBYTE}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.yts-airbyte-api.entrypoints=websecure"
      - "traefik.http.routers.yts-airbyte-api.tls=true"
      - "traefik.http.services.yts-airbyte-api.loadbalancer.server.port=8001"
    restart: unless-stopped
    networks:
      - yts-core

  yts-airbyte-worker:
    image: ${IMAGE_AIRBYTE_WORKER}
    environment:
      AIRBYTE_ROLE: worker
      DATABASE_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_AIRBYTE}?sslmode=disable
      DATABASE_USER: ${PG_USER_AIRBYTE}
      DATABASE_PASSWORD: ${PG_PWD_AIRBYTE}
      TEMPORAL_HOST: yts-airbyte-temporal:7233
      INTERNAL_API_HOST: http://yts-airbyte-server:8001/
      WORKLOAD_API_HOST: http://yts-airbyte-server:8001/
      WORKSPACE_ROOT: /data/airbyte/workspace
      AIRBYTE_CLOUD_STORAGE_TYPE: S3
      AIRBYTE_CLOUD_STORAGE_BUCKET_LOG: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_STATE: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_WORKLOAD_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_ACTIVITY_PAYLOAD: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_AUDIT_LOGGING: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_BUCKET_PROFILER_OUTPUT: ${S3_BUCKET}
      AIRBYTE_CLOUD_STORAGE_S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      AIRBYTE_CLOUD_STORAGE_S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AIRBYTE_CLOUD_STORAGE_S3_REGION: ${S3_REGION}
      AIRBYTE_CLOUD_STORAGE_S3_ENDPOINT: http://yts-minio:9000
      AIRBYTE_CLOUD_STORAGE_S3_PATH_STYLE_ACCESS: "true"
    volumes:
      - ./services/yts-airbyte-server/data/workspace:/data/airbyte/workspace
    depends_on:
      yts-airbyte-server:
        condition: service_started
      yts-pg:
        condition: service_healthy
      yts-airbyte-temporal:
        condition: service_started
    restart: unless-stopped
    networks:
      - yts-core

  yts-airbyte-temporal:
    image: ${IMAGE_TEMPORAL}
    environment:
      DB: postgres12_pgx
      POSTGRES_USER: ${PG_USER_TEMPORAL}
      POSTGRES_PWD: ${PG_PWD_TEMPORAL}
      POSTGRES_SEEDS: ${PG_HOST}
      POSTGRES_PORT: ${PG_PORT}
      POSTGRES_DB: ${PG_DB_TEMPORAL}
    depends_on:
      yts-pg:
        condition: service_healthy
    healthcheck:
      test: ["CMD","tctl","--address","localhost:7233","namespace","list"]
      <<: *hc
    restart: unless-stopped
    networks:
      - yts-core

  yts-om-es:
    image: ${IMAGE_ELASTICSEARCH}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED}
      - xpack.security.http.ssl.enabled=${ELASTICSEARCH_HTTP_SSL_ENABLED}
      - xpack.security.http.ssl.key=${ELASTICSEARCH_HTTP_SSL_KEY}
      - xpack.security.http.ssl.certificate=${ELASTICSEARCH_HTTP_SSL_CERT}
      - xpack.security.http.ssl.certificate_authorities=${ELASTICSEARCH_HTTP_SSL_CA}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_USERNAME=${ELASTICSEARCH_USERNAME}
    volumes:
      - ./services/yts-om-es/data:/usr/share/elasticsearch/data
      - ./services/yts-om-es/data/certs:/usr/share/elasticsearch/config/certs:ro
    healthcheck:
      test:
        - CMD-SHELL
        - >-
          URL="$${ELASTICSEARCH_SCHEME}://localhost:9200/_cluster/health";
          set -- curl -fsS;
          if [ "$${ELASTICSEARCH_SECURITY_ENABLED}" = "true" ]; then
            set -- "$@" -u "$${ELASTICSEARCH_USERNAME}:$${ELASTIC_PASSWORD}"
          fi;
          if [ "$${ELASTICSEARCH_HTTP_SSL_ENABLED}" = "true" ]; then
            set -- "$@" --cacert "$${ELASTICSEARCH_HTTP_SSL_CA}"
          fi;
          set -- "$@" "$${URL}";
          "$@" | grep -Eq '"status":"(yellow|green)"'
      <<: *hc
    restart: unless-stopped
    networks:
      - yts-core

  yts-openmetadata-server:
    image: ${IMAGE_OPENMETADATA}
    depends_on:
      yts-pg:
        condition: service_healthy
      yts-om-es:
        condition: service_healthy
    environment:
      OPENMETADATA_CLUSTER_NAME: docker
      OPENMETADATA_DATABASE_DRIVER: "postgres"
      OPENMETADATA_DATABASE_HOST: ${PG_HOST}
      OPENMETADATA_DATABASE_PORT: ${PG_PORT}
      OPENMETADATA_DATABASE_USER: ${PG_USER_OM}
      OPENMETADATA_DATABASE_PASSWORD: ${PG_PWD_OM}
      OPENMETADATA_DATABASE_DB: ${PG_DB_OM}
      AUTHENTICATION_PROVIDER: basic
      ELASTICSEARCH_HOST: yts-om-es
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_SCHEME: ${ELASTICSEARCH_SCHEME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_USER: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_VERIFY_CERTIFICATE: ${ELASTICSEARCH_VERIFY_CERTIFICATE}
      ELASTICSEARCH_SSL_CERT: ${OPENMETADATA_ELASTICSEARCH_CA}
    volumes:
      - ./services/yts-om-es/data/certs:/opt/openmetadata/certs:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-om.rule=Host(`${HOST_META}`)"
      - "traefik.http.routers.yts-om.entrypoints=websecure"
      - "traefik.http.routers.yts-om.tls=true"
      - "traefik.http.services.yts-om.loadbalancer.server.port=8585"
    restart: unless-stopped
    networks:
      - yts-core

  yts-llm:
    image: ${IMAGE_OLLAMA}
    environment:
      OLLAMA_NUM_PARALLEL: ${OLLAMA_NUM_PARALLEL}
      OLLAMA_KEEP_ALIVE: ${OLLAMA_KEEP_ALIVE}
    volumes:
      - ./services/yts-llm/data:/root/.ollama:rw
    entrypoint: ["/bin/sh","-c"]
    command: >
      "ollama serve & 
       sleep 3 && 
       ollama pull ${OLLAMA_MODEL} || true && 
       tail -f /dev/null"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-llm.rule=Host(`${HOST_AI}`)"
      - "traefik.http.routers.yts-llm.entrypoints=websecure"
      - "traefik.http.routers.yts-llm.tls=true"
      - "traefik.http.services.yts-llm.loadbalancer.server.port=11434"
    restart: unless-stopped
    networks:
      - yts-core

  yts-ai-gateway:
    image: yts-ai-gateway:latest
    environment:
      LLM_BASE_URL: http://yts-llm:11434
      READONLY_MODE: "true"
      DEFAULT_QUERY_LIMIT: "1000"
      OIDC_ISSUER: https://${HOST_SSO}
    depends_on:
      yts-llm:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-aigw.rule=Host(`${HOST_ASSIST}`)"
      - "traefik.http.routers.yts-aigw.entrypoints=websecure"
      - "traefik.http.routers.yts-aigw.tls=true"
      - "traefik.http.services.yts-aigw.loadbalancer.server.port=7080"
    restart: unless-stopped
    networks:
      - yts-core

  yts-dtadminui:
    image: yts-dtadminui:latest
    environment:
      PUBLIC_BASE_URL: https://${HOST_PORTAL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-adminui.rule=Host(`${HOST_PORTAL}`)"
      - "traefik.http.routers.yts-adminui.entrypoints=websecure"
      - "traefik.http.routers.yts-adminui.tls=true"
      - "traefik.http.services.yts-adminui.loadbalancer.server.port=3000"
    restart: unless-stopped
    networks:
      - yts-core

  yts-dtadmin:
    image: yts-dtadmin:latest
    environment:
      APP_EXTERNAL_URL: https://${HOST_ADMIN}
      OIDC_ISSUER: https://${HOST_SSO}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yts-admin.rule=Host(`${HOST_ADMIN}`)"
      - "traefik.http.routers.yts-admin.entrypoints=websecure"
      - "traefik.http.routers.yts-admin.tls=true"
      - "traefik.http.services.yts-admin.loadbalancer.server.port=8080"
    restart: unless-stopped
    networks:
      - yts-core

  yts-loki:
    image: ${IMAGE_LOKI}
    profiles:
      - logging
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./services/yts-loki/init/config.yml:/etc/loki/config.yml:ro
      - ./services/yts-loki/data:/loki
    restart: unless-stopped
    networks:
      - yts-core

  yts-promtail:
    image: ${IMAGE_PROMTAIL}
    profiles:
      - logging
    command: ["--config.file=/etc/promtail/config.yml"]
    depends_on:
      yts-loki:
        condition: service_started
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./services/yts-promtail/init/config.yml:/etc/promtail/config.yml:ro
    restart: unless-stopped
    networks:
      - yts-core

  yts-prometheus:
    image: ${IMAGE_PROMETHEUS}
    profiles:
      - monitoring
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - ./services/yts-prometheus/init/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./services/yts-prometheus/data:/prometheus
    restart: unless-stopped
    networks:
      - yts-core

  yts-grafana:
    image: ${IMAGE_GRAFANA}
    profiles:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - ./services/yts-grafana/data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - yts-core

  yts-cadvisor:
    image: ${IMAGE_CADVISOR}
    profiles:
      - monitoring
    privileged: true
    command:
      - "--housekeeping_interval=10s"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks:
      - yts-core

networks:
  yts-core:
    driver: bridge
